/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*
 * This file is part of the LibreOffice project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * This file incorporates work covered by the following license notice:
 *
 *   Licensed to the Apache Software Foundation (ASF) under one or more
 *   contributor license agreements. See the NOTICE file distributed
 *   with this work for additional information regarding copyright
 *   ownership. The ASF licenses this file to you under the Apache
 *   License, Version 2.0 (the "License"); you may not use this file
 *   except in compliance with the License. You may obtain a copy of
 *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
 */

#include "analysis.hrc"

StringArray ANALYSIS_Workday
{
    ItemList [ en-US ] =
    {
        < "Returns the serial number of the date before or after a specified number of workdays"; > ;
        < "Start date"; > ;
        < "The start date"; > ;
        < "Days"; > ;
        < "The number of workdays before or after the start date"; > ;
        < "Holidays"; > ;
        < "List of date values of days off (vacation, holidays, etc.)"; > ;
    };
};

StringArray ANALYSIS_Yearfrac
{
    ItemList [ en-US ] =
    {
        < "Returns the number of years (including fractional part) between two dates"; > ;
        < "Start date"; > ;
        < "The start date"; > ;
        < "End date"; > ;
        < "The end date"; > ;
        < "Basis"; > ;
        < "Basis indicates the day-count convention to use in the calculation"; > ;
    };
};

StringArray ANALYSIS_Edate
{
    ItemList [ en-US ] =
    {
        < "Returns the serial number of the date that is a specified number of months before or after the start date"; > ;
        < "Start date"; > ;
        < "The start date"; > ;
        < "Months"; > ;
        < "Number of months before or after the start date"; > ;
    };
};

StringArray ANALYSIS_Weeknum
{
    ItemList [ en-US ] =
    {
        < "Returns the number of the calendar week in which the specified date occurs.\nThis function exists for interoperability with older Microsoft Excel documents, for new documents use WEEKNUM instead."; > ;
        < "Date"; > ;
        < "The date or date serial number"; > ;
        < "Return type"; > ;
        < "Indicates the first day of the week (1 = Sunday, 2 = Monday)"; > ;
    };
};

StringArray ANALYSIS_Eomonth
{
    ItemList [ en-US ] =
    {
        < "Returns the serial number of the last day of the month that comes a certain number of months before or after the start date"; > ;
        < "Start date"; > ;
        < "The start date"; > ;
        < "Months"; > ;
        < "Number of months before or after the start date"; > ;
    };
};

StringArray ANALYSIS_Networkdays
{
    ItemList [ en-US ] =
    {
        < "Returns the number of workdays between two dates.\nThis function exists for interoperability with older Microsoft Excel documents, for new documents use NETWORKDAYS instead."; > ;
        < "Start date"; > ;
        < "The start date"; > ;
        < "End date"; > ;
        < "The end date"; > ;
        < "Holidays"; > ;
        < "List of date values representing days off (vacation, holidays, etc.)"; > ;
    };
};

StringArray ANALYSIS_Iseven
{
    ItemList [ en-US ] =
    {
        < "Returns the value 'true' if the number is even"; > ;
        < "Number"; > ;
        < "The number"; > ;
    };
};

StringArray ANALYSIS_Isodd
{
    ItemList [ en-US ] =
    {
        < "Returns the value 'true' if the number is odd"; > ;
        < "Number"; > ;
        < "The number"; > ;
    };
};

StringArray ANALYSIS_Multinomial
{
    ItemList [ en-US ] =
    {
        < "Returns the multinomial coefficient of a set of numbers"; > ;
        < "Number"; > ;
        < "Number or list of numbers for which you want the multinomial coefficient"; > ;
    };
};

StringArray ANALYSIS_Seriessum
{
    ItemList [ en-US ] =
    {
        < "Returns the sum of a power series"; > ;
        < "X"; > ;
        < "The independent variable of the power series"; > ;
        < "N"; > ;
        < "The initial power to which x is to be raised"; > ;
        < "M"; > ;
        < "The increment by which to increase n for each term in the series"; > ;
        < "Coefficients"; > ;
        < "Set of coefficients by which each successive power of the variable x is multiplied"; > ;
    };
};

StringArray ANALYSIS_Quotient
{
    ItemList [ en-US ] =
    {
        < "Returns the integer portion of a division"; > ;
        < "Numerator"; > ;
        < "The dividend"; > ;
        < "Denominator"; > ;
        < "The divisor"; > ;
    };
};

StringArray ANALYSIS_Mround
{
    ItemList [ en-US ] =
    {
        < "Returns a number rounded to a specified multiple"; > ;
        < "Number"; > ;
        < "The number to round off"; > ;
        < "Multiple"; > ;
        < "The multiple to which you want to round number"; > ;
    };
};

StringArray ANALYSIS_Sqrtpi
{
    ItemList [ en-US ] =
    {
        < "Returns the square root of a number which has been multiplied by pi"; > ;
        < "Number"; > ;
        < "The number by which pi is multiplied"; > ;
    };
};

StringArray ANALYSIS_Randbetween
{
    ItemList [ en-US ] =
    {
        < "Returns a random integer between the numbers you specify"; > ;
        < "Bottom"; > ;
        < "The smallest integer returned"; > ;
        < "Top"; > ;
        < "The largest integer returned"; > ;
    };
};

StringArray ANALYSIS_Gcd
{
    ItemList [ en-US ] =
    {
        < "Returns the greatest common divisor.\nThis function exists for interoperability with older Microsoft Excel documents, for new documents use GCD instead."; > ;
        < "Number"; > ;
        < "Number or list of numbers"; > ;
    };
};

StringArray ANALYSIS_Lcm
{
    ItemList [ en-US ] =
    {
        < "Returns the least common multiple.\nThis function exists for interoperability with older Microsoft Excel documents, for new documents use LCM instead."; > ;
        < "Number"; > ;
        < "Number or list of numbers"; > ;
    };
};

StringArray ANALYSIS_Besseli
{
    ItemList [ en-US ] =
    {
        < "Returns the modified Bessel function In(x)"; > ;
        < "X"; > ;
        < "The value at which the function is to be evaluated"; > ;
        < "N"; > ;
        < "The order of the Bessel function"; > ;
    };
};

StringArray ANALYSIS_Besselj
{
    ItemList [ en-US ] =
    {
        < "Returns the Bessel function Jn(x)"; > ;
        < "X"; > ;
        < "The value at which the function is to be evaluated"; > ;
        < "N"; > ;
        < "The order of the Bessel function"; > ;
    };
};

StringArray ANALYSIS_Besselk
{
    ItemList [ en-US ] =
    {
        < "Returns the Bessel function Kn(x)"; > ;
        < "X"; > ;
        < "The value at which the function is to be evaluated"; > ;
        < "N"; > ;
        < "The order of the Bessel function"; > ;
    };
};

StringArray ANALYSIS_Bessely
{
    ItemList [ en-US ] =
    {
        < "Returns the Bessel function Yn(x)"; > ;
        < "X"; > ;
        < "The value at which the function is to be evaluated"; > ;
        < "N"; > ;
        < "The order of the Bessel function"; > ;
    };
};

StringArray ANALYSIS_Bin2Oct
{
    ItemList [ en-US ] =
    {
        < "Converts a binary number to an octal number"; > ;
        < "Number"; > ;
        < "The binary number to be converted (as text)"; > ;
        < "Places"; > ;
        < "Number of places used"; > ;
    };
};

StringArray ANALYSIS_Bin2Dec
{
    ItemList [ en-US ] =
    {
        < "Converts a binary number to a decimal number"; > ;
        < "Number"; > ;
        < "The binary number to be converted (as text)"; > ;
    };
};

StringArray ANALYSIS_Bin2Hex
{
    ItemList [ en-US ] =
    {
        < "Converts a binary number to a hexadecimal number"; > ;
        < "Number"; > ;
        < "The binary number to be converted (as text)"; > ;
        < "Places"; > ;
        < "Number of places used."; > ;
    };
};

StringArray ANALYSIS_Oct2Bin
{
    ItemList [ en-US ] =
    {
        < "Converts an octal number to a binary number"; > ;
        < "Number"; > ;
        < "The octal number to be converted (as text)"; > ;
        < "Places"; > ;
        < "Number of places used"; > ;
    };
};

StringArray ANALYSIS_Oct2Dec
{
    ItemList [ en-US ] =
    {
        < "Converts an octal number to a decimal number"; > ;
        < "Number"; > ;
        < "The octal number to be converted (as text)"; > ;
    };
};

StringArray ANALYSIS_Oct2Hex
{
    ItemList [ en-US ] =
    {
        < "Converts an octal number to a hexadecimal number"; > ;
        < "Number"; > ;
        < "The octal number to be converted (as text)"; > ;
        < "Places"; > ;
        < "Number of places used"; > ;
    };
};

StringArray ANALYSIS_Dec2Bin
{
    ItemList [ en-US ] =
    {
        < "Converts a decimal number to a binary number"; > ;
        < "Number"; > ;
        < "The decimal integer to be converted"; > ;
        < "Places"; > ;
        < "Number of places used"; > ;
    };
};

StringArray ANALYSIS_Dec2Hex
{
    ItemList [ en-US ] =
    {
        < "Converts a decimal number to a hexadecimal number"; > ;
        < "Number"; > ;
        < "The decimal integer to be converted"; > ;
        < "Places"; > ;
        < "Number of places used"; > ;
    };
};

StringArray ANALYSIS_Dec2Oct
{
    ItemList [ en-US ] =
    {
        < "Converts a decimal number into an octal number"; > ;
        < "Number"; > ;
        < "The decimal number"; > ;
        < "Places"; > ;
        < "Number of places used"; > ;
    };
};

StringArray ANALYSIS_Hex2Bin
{
    ItemList [ en-US ] =
    {
        < "Converts a hexadecimal number to a binary number"; > ;
        < "Number"; > ;
        < "The hexadecimal number to be converted (as text)"; > ;
        < "Places"; > ;
        < "Number of places used"; > ;
    };
};

StringArray ANALYSIS_Hex2Dec
{
    ItemList [ en-US ] =
    {
        < "Converts a hexadecimal number to a decimal number"; > ;
        < "Number"; > ;
        < "The hexadecimal number to be converted (as text)"; > ;
    };
};

StringArray ANALYSIS_Hex2Oct
{
    ItemList [ en-US ] =
    {
        < "Converts a hexadecimal number to an octal number"; > ;
        < "Number"; > ;
        < "The hexadecimal number to be converted (as text)"; > ;
        < "Places"; > ;
        < "Number of places used"; > ;
    };
};

StringArray ANALYSIS_Delta
{
    ItemList [ en-US ] =
    {
        < "Tests whether two values are equal"; > ;
        < "Number 1"; > ;
        < "The first number"; > ;
        < "Number 2"; > ;
        < "The second number"; > ;
    };
};

StringArray ANALYSIS_Erf
{
    ItemList [ en-US ] =
    {
        < "Returns the error function"; > ;
        < "Lower limit"; > ;
        < "The lower limit for integration"; > ;
        < "Upper limit"; > ;
        < "The upper limit for integration"; > ;
    };
};

StringArray ANALYSIS_Erfc
{
    ItemList [ en-US ] =
    {
        < "Returns the complementary error function"; > ;
        < "Lower limit"; > ;
        < "The lower limit for integration"; > ;
    };
};

StringArray ANALYSIS_Gestep
{
    ItemList [ en-US ] =
    {
        < "Tests whether a number is greater than a threshold value"; > ;
        < "Number"; > ;
        < "The value to test against step"; > ;
        < "Step"; > ;
        < "The threshold value"; > ;
    };
};

StringArray ANALYSIS_Factdouble
{
    ItemList [ en-US ] =
    {
        < "Returns the double factorial of Number"; > ;
        < "Number"; > ;
        < "The number"; > ;
    };
};

StringArray ANALYSIS_Imabs
{
    ItemList [ en-US ] =
    {
        < "Returns the absolute value (modulus) of a complex number"; > ;
        < "Complex number"; > ;
        < "The complex number"; > ;
    };
};

StringArray ANALYSIS_Imaginary
{
    ItemList [ en-US ] =
    {
        < "Returns the imaginary coefficient of a complex number"; > ;
        < "Complex number"; > ;
        < "The complex number"; > ;
    };
};

StringArray ANALYSIS_Impower
{
    ItemList [ en-US ] =
    {
        < "Returns a complex number raised to a real power"; > ;
        < "Complex number"; > ;
        < "The complex number"; > ;
        < "Number"; > ;
        < "Power to which the complex number is raised"; > ;
    };
};

StringArray ANALYSIS_Imargument
{
    ItemList [ en-US ] =
    {
        < "Returns the argument theta, an angle expressed in radians"; > ;
        < "Complex number"; > ;
        < "A complex number"; > ;
    };
};

StringArray ANALYSIS_Imcos
{
    ItemList [ en-US ] =
    {
        < "Returns the cosine of a complex number"; > ;
        < "Complex number"; > ;
        < "A complex number"; > ;
    };
};

StringArray ANALYSIS_Imdiv
{
    ItemList [ en-US ] =
    {
        < "Returns the quotient of two complex numbers"; > ;
        < "Numerator"; > ;
        < "The dividend"; > ;
        < "Denominator"; > ;
        < "The divisor"; > ;
    };
};

StringArray ANALYSIS_Imexp
{
    ItemList [ en-US ] =
    {
        < "Returns the algebraic form of the exponential of a complex number"; > ;
        < "Complex number"; > ;
        < "The complex number"; > ;
    };
};

StringArray ANALYSIS_Imconjugate
{
    ItemList [ en-US ] =
    {
        < "Returns the complex conjugate of a complex number"; > ;
        < "Complex number"; > ;
        < "The complex number"; > ;
    };
};

StringArray ANALYSIS_Imln
{
    ItemList [ en-US ] =
    {
        < "Returns the natural logarithm of a complex number"; > ;
        < "Complex number"; > ;
        < "The complex number"; > ;
    };
};

StringArray ANALYSIS_Imlog10
{
    ItemList [ en-US ] =
    {
        < "Returns the base-10 logarithm of a complex number"; > ;
        < "Complex number"; > ;
        < "The complex number"; > ;
    };
};

StringArray ANALYSIS_Imlog2
{
    ItemList [ en-US ] =
    {
        < "Returns the base-2 logarithm of a complex number"; > ;
        < "Complex number"; > ;
        < "The complex number"; > ;
    };
};

StringArray ANALYSIS_Improduct
{
    ItemList [ en-US ] =
    {
        < "Returns the product of several complex numbers"; > ;
        < "Complex number"; > ;
        < "The first complex number"; > ;
        < "Complex number"; > ;
        < "Another complex number"; > ;
    };
};

StringArray ANALYSIS_Imreal
{
    ItemList [ en-US ] =
    {
        < "Returns the real coefficient of a complex number"; > ;
        < "Complex number"; > ;
        < "The complex number"; > ;
    };
};

StringArray ANALYSIS_Imsin
{
    ItemList [ en-US ] =
    {
        < "Returns the sine of a complex number"; > ;
        < "Complex number"; > ;
        < "The complex number"; > ;
    };
};

StringArray ANALYSIS_Imsub
{
    ItemList [ en-US ] =
    {
        < "Returns the difference of two complex numbers"; > ;
        < "Complex number 1"; > ;
        < "Complex number 1"; > ;
        < "Complex number 2"; > ;
        < "Complex number 2"; > ;
    };
};

StringArray ANALYSIS_Imsqrt
{
    ItemList [ en-US ] =
    {
        < "Returns the square root of a complex number"; > ;
        < "Complex number"; > ;
        < "The complex number"; > ;
    };
};

StringArray ANALYSIS_Imsum
{
    ItemList [ en-US ] =
    {
        < "Returns the sum of complex numbers"; > ;
        < "Complex number"; > ;
        < "The complex number"; > ;
    };
};

StringArray ANALYSIS_Imtan
{
    ItemList [ en-US ] =
    {
        < "Returns the tangent of a complex number"; > ;
        < "Complex number"; > ;
        < "A complex number"; > ;
    };
};

StringArray ANALYSIS_Imsec
{
    ItemList [ en-US ] =
    {
        < "Returns the secant of a complex number"; > ;
        < "Complex number"; > ;
        < "A complex number"; > ;
    };
};

StringArray ANALYSIS_Imcsc
{
    ItemList [ en-US ] =
    {
        < "Returns the cosecant of a complex number"; > ;
        < "Complex number"; > ;
        < "A complex number"; > ;
    };
};

StringArray ANALYSIS_Imcot
{
    ItemList [ en-US ] =
    {
        < "Returns the cotangent of a complex number"; > ;
        < "Complex number"; > ;
        < "A complex number"; > ;
    };
};

StringArray ANALYSIS_Imsinh
{
    ItemList [ en-US ] =
    {
        < "Returns the hyperbolic sine of a complex number"; > ;
        < "Complex number"; > ;
        < "A complex number"; > ;
    };
};

StringArray ANALYSIS_Imcosh
{
    ItemList [ en-US ] =
    {
        < "Returns the hyperbolic cosine of a complex number"; > ;
        < "Complex number"; > ;
        < "A complex number"; > ;
    };
};

StringArray ANALYSIS_Imsech
{
    ItemList [ en-US ] =
    {
        < "Returns the hyperbolic secant of a complex number"; > ;
        < "Complex number"; > ;
        < "A complex number"; > ;
    };
};

StringArray ANALYSIS_Imcsch
{
    ItemList [ en-US ] =
    {
        < "Returns the hyperbolic cosecant of a complex number"; > ;
        < "Complex number"; > ;
        < "A complex number"; > ;
    };
};

StringArray ANALYSIS_Complex
{
    ItemList [ en-US ] =
    {
        < "Converts real and imaginary coefficients into a complex number"; > ;
        < "Real num"; > ;
        < "The real coefficient"; > ;
        < "I num"; > ;
        < "The imaginary coefficient"; > ;
        < "Suffix"; > ;
        < "The suffix"; > ;
    };
};

StringArray ANALYSIS_Convert
{
    ItemList [ en-US ] =
    {
        < "Converts a number from one measurement system to another"; > ;
        < "Number"; > ;
        < "The number"; > ;
        < "From unit"; > ;
        < "Unit of measure for number"; > ;
        < "To unit"; > ;
        < "Unit of measure for the result"; > ;
    };
};

StringArray ANALYSIS_Amordegrc
{
    ItemList [ en-US ] =
    {
        < "Returns the prorated linear depreciation of an asset for each accounting period"; > ;
        < "Cost"; > ;
        < "Cost of the asset"; > ;
        < "Date purchased"; > ;
        < "Purchase date of the asset"; > ;
        < "First period"; > ;
        < "Date the first period ends"; > ;
        < "Salvage"; > ;
        < "Salvage value of an asset at the end of its life"; > ;
        < "Period"; > ;
        < "The period"; > ;
        < "Rate"; > ;
        < "The rate of depreciation"; > ;
        < "Basis"; > ;
        < "The year basis to be used"; > ;
    };
};

StringArray ANALYSIS_Amorlinc
{
    ItemList [ en-US ] =
    {
        < "Returns the prorated linear depreciation of an asset for each accounting period"; > ;
        < "Cost"; > ;
        < "Cost of the asset"; > ;
        < "Date purchased"; > ;
        < "Purchase date of the asset"; > ;
        < "First period"; > ;
        < "The date the first period ends"; > ;
        < "Salvage"; > ;
        < "The salvage value of an asset at the end of its life"; > ;
        < "Period"; > ;
        < "The period"; > ;
        < "Rate"; > ;
        < "The rate of depreciation"; > ;
        < "Basis"; > ;
        < "The year basis to be used"; > ;
    };
};

StringArray ANALYSIS_Accrint
{
    ItemList [ en-US ] =
    {
        < "Returns the accrued interest for a security that pays periodic interest"; > ;
        < "Issue"; > ;
        < "Issue date of the security"; > ;
        < "First interest"; > ;
        < "First interest date of the security"; > ;
        < "Settlement"; > ;
        < "The settlement"; > ;
        < "Rate"; > ;
        < "The rate"; > ;
        < "Par"; > ;
        < "The par value"; > ;
        < "Frequency"; > ;
        < "The frequency"; > ;
        < "Basis"; > ;
        < "The basis"; > ;
    };
};

StringArray ANALYSIS_Accrintm
{
    ItemList [ en-US ] =
    {
        < "Returns the accrued interest for a security that pays interest at maturity"; > ;
        < "Issue"; > ;
        < "The issue date"; > ;
        < "Settlement"; > ;
        < "The settlement"; > ;
        < "Rate"; > ;
        < "The rate"; > ;
        < "Par"; > ;
        < "The par value"; > ;
        < "Basis"; > ;
        < "The basis"; > ;
    };
};

StringArray ANALYSIS_Received
{
    ItemList [ en-US ] =
    {
        < "Returns the amount paid out at maturity for a fully invested security"; > ;
        < "Settlement"; > ;
        < "The settlement"; > ;
        < "Maturity"; > ;
        < "The maturity"; > ;
        < "Investment"; > ;
        < "The investment"; > ;
        < "Discount"; > ;
        < "The discount"; > ;
        < "Basis"; > ;
        < "The basis"; > ;
    };
};

StringArray ANALYSIS_Disc
{
    ItemList [ en-US ] =
    {
        < "Returns the discount rate for a security"; > ;
        < "Settlement"; > ;
        < "The settlement"; > ;
        < "Maturity"; > ;
        < "The maturity"; > ;
        < "Price"; > ;
        < "The price"; > ;
        < "Redemption"; > ;
        < "The redemption value"; > ;
        < "Basis"; > ;
        < "The basis"; > ;
    };
};

StringArray ANALYSIS_Duration
{
    ItemList [ en-US ] =
    {
        < "Returns the annual Macaulay duration of a security with periodic interest payments"; > ;
        < "Settlement"; > ;
        < "The settlement"; > ;
        < "Maturity"; > ;
        < "The maturity"; > ;
        < "Coupon"; > ;
        < "The coupon rate"; > ;
        < "Yield"; > ;
        < "The yield"; > ;
        < "Frequency"; > ;
        < "The frequency"; > ;
        < "Basis"; > ;
        < "The basis"; > ;
    };
};

StringArray ANALYSIS_Effect
{
    ItemList [ en-US ] =
    {
        < "Returns the effective annual interest rate"; > ;
        < "Nominal rate"; > ;
        < "The nominal rate"; > ;
        < "Npery"; > ;
        < "The periods"; > ;
    };
};

StringArray ANALYSIS_Cumprinc
{
    ItemList [ en-US ] =
    {
        < "Returns the cumulative principal on a loan to be paid between two periods"; > ;
        < "Rate"; > ;
        < "The rate"; > ;
        < "Nper"; > ;
        < "Number of payment periods"; > ;
        < "Pv"; > ;
        < "The present value"; > ;
        < "Start period"; > ;
        < "The start period"; > ;
        < "End period"; > ;
        < "The end period"; > ;
        < "Type"; > ;
        < "The type of maturity"; > ;
    };
};

StringArray ANALYSIS_Cumipmt
{
    ItemList [ en-US ] =
    {
        < "Returns the cumulative interest to be paid between two periods"; > ;
        < "Rate"; > ;
        < "The rate"; > ;
        < "Nper"; > ;
        < "Number of payment periods"; > ;
        < "Pv"; > ;
        < "The present value"; > ;
        < "Start period"; > ;
        < "The start period"; > ;
        < "End period"; > ;
        < "The end period"; > ;
        < "Type"; > ;
        < "The type of maturity"; > ;
    };
};

StringArray ANALYSIS_Price
{
    ItemList [ en-US ] =
    {
        < "Returns the price per 100 currency units face value of a security that pays periodic interest"; > ;
        < "Settlement"; > ;
        < "The settlement"; > ;
        < "Maturity"; > ;
        < "The maturity"; > ;
        < "Rate"; > ;
        < "The rate"; > ;
        < "Yield"; > ;
        < "The yield"; > ;
        < "Redemption"; > ;
        < "The redemption value"; > ;
        < "Frequency"; > ;
        < "The frequency"; > ;
        < "Basis"; > ;
        < "The basis"; > ;
    };
};

StringArray ANALYSIS_Pricedisc
{
    ItemList [ en-US ] =
    {
        < "Returns the price per 100 currency units face value of a discounted security"; > ;
        < "Settlement"; > ;
        < "The settlement"; > ;
        < "Maturity"; > ;
        < "The maturity"; > ;
        < "Discount"; > ;
        < "The discount"; > ;
        < "Redemption"; > ;
        < "The redemption value"; > ;
        < "Basis"; > ;
        < "The basis"; > ;
    };
};

StringArray ANALYSIS_Pricemat
{
    ItemList [ en-US ] =
    {
        < "Returns the price per 100 currency units face value of a security that pays interest at maturity"; > ;
        < "Settlement"; > ;
        < "The settlement"; > ;
        < "Maturity"; > ;
        < "The maturity"; > ;
        < "Issue"; > ;
        < "The issue date"; > ;
        < "Rate"; > ;
        < "The rate"; > ;
        < "Yield"; > ;
        < "The yield"; > ;
        < "Basis"; > ;
        < "The basis"; > ;
    };
};

StringArray ANALYSIS_Mduration
{
    ItemList [ en-US ] =
    {
        < "Returns the Macaulay modified duration for a security with an assumed par value of 100 currency units"; > ;
        < "Settlement"; > ;
        < "The settlement"; > ;
        < "Maturity"; > ;
        < "The maturity"; > ;
        < "Coupon"; > ;
        < "The coupon rate"; > ;
        < "Yield"; > ;
        < "The yield"; > ;
        < "Frequency"; > ;
        < "The frequency"; > ;
        < "Basis"; > ;
        < "The basis"; > ;
    };
};

StringArray ANALYSIS_Nominal
{
    ItemList [ en-US ] =
    {
        < "Returns the annual nominal interest rate"; > ;
        < "Effective rate"; > ;
        < "The effective interest rate"; > ;
        < "Npery"; > ;
        < "The periods"; > ;
    };
};

StringArray ANALYSIS_Dollarfr
{
    ItemList [ en-US ] =
    {
        < "Converts a price expressed as a decimal into a price expressed as a fraction"; > ;
        < "Decimal dollar"; > ;
        < "The decimal number"; > ;
        < "Fraction"; > ;
        < "The divisor"; > ;
    };
};

StringArray ANALYSIS_Dollarde
{
    ItemList [ en-US ] =
    {
        < "Converts a price expressed as a fraction into a price expressed as a decimal"; > ;
        < "Fractional dollar"; > ;
        < "The number as a fraction"; > ;
        < "Fraction"; > ;
        < "The divisor"; > ;
    };
};

StringArray ANALYSIS_Yield
{
    ItemList [ en-US ] =
    {
        < "Returns the yield on a security that pays periodic interest"; > ;
        < "Settlement"; > ;
        < "The settlement"; > ;
        < "Maturity"; > ;
        < "The maturity"; > ;
        < "Rate"; > ;
        < "The rate"; > ;
        < "Price"; > ;
        < "The price"; > ;
        < "Redemption"; > ;
        < "The redemption value"; > ;
        < "Frequency"; > ;
        < "The frequency"; > ;
        < "Basis"; > ;
        < "The basis"; > ;
    };
};

StringArray ANALYSIS_Yielddisc
{
    ItemList [ en-US ] =
    {
        < "Returns the annual yield for a discounted security"; > ;
        < "Settlement"; > ;
        < "The settlement"; > ;
        < "Maturity"; > ;
        < "The maturity"; > ;
        < "Price"; > ;
        < "The price"; > ;
        < "Redemption"; > ;
        < "The redemption value"; > ;
        < "Basis"; > ;
        < "The basis"; > ;
    };
};

StringArray ANALYSIS_Yieldmat
{
    ItemList [ en-US ] =
    {
        < "Returns the annual yield of a security that pays interest at maturity"; > ;
        < "Settlement"; > ;
        < "The settlement"; > ;
        < "Maturity"; > ;
        < "The maturity"; > ;
        < "Issue"; > ;
        < "The issue date"; > ;
        < "Rate"; > ;
        < "The rate"; > ;
        < "Price"; > ;
        < "The price"; > ;
        < "Basis"; > ;
        < "The basis"; > ;
    };
};

StringArray ANALYSIS_Tbilleq
{
    ItemList [ en-US ] =
    {
        < "Returns the bond-equivalent yield for a treasury bill"; > ;
        < "Settlement"; > ;
        < "The settlement"; > ;
        < "Maturity"; > ;
        < "The maturity"; > ;
        < "Discount"; > ;
        < "The discount rate"; > ;
    };
};

StringArray ANALYSIS_Tbillprice
{
    ItemList [ en-US ] =
    {
        < "Returns the price of 100 currency units face value for a treasury bill"; > ;
        < "Settlement"; > ;
        < "The settlement"; > ;
        < "Maturity"; > ;
        < "The maturity"; > ;
        < "Discount"; > ;
        < "The discount rate"; > ;
    };
};

StringArray ANALYSIS_Tbillyield
{
    ItemList [ en-US ] =
    {
        < "Returns the yield for a treasury bill"; > ;
        < "Settlement"; > ;
        < "The settlement"; > ;
        < "Maturity"; > ;
        < "The maturity"; > ;
        < "Price"; > ;
        < "The price"; > ;
    };
};

StringArray ANALYSIS_Oddfprice
{
    ItemList [ en-US ] =
    {
        < "Returns the price per $100 face value of a security with an odd first period"; > ;
        < "Settlement"; > ;
        < "The settlement"; > ;
        < "Maturity"; > ;
        < "The maturity"; > ;
        < "Issue"; > ;
        < "The issue date"; > ;
        < "First coupon"; > ;
        < "The first coupon date"; > ;
        < "Rate"; > ;
        < "The rate"; > ;
        < "Yield"; > ;
        < "The yield"; > ;
        < "Redemption"; > ;
        < "The redemption value"; > ;
        < "Frequency"; > ;
        < "The frequency"; > ;
        < "Basis"; > ;
        < "The basis"; > ;
    };
};

StringArray ANALYSIS_Oddfyield
{
    ItemList [ en-US ] =
    {
        < "Returns the yield of a security with an odd first period"; > ;
        < "Settlement"; > ;
        < "The settlement"; > ;
        < "Maturity"; > ;
        < "The maturity"; > ;
        < "Issue"; > ;
        < "The issue date"; > ;
        < "First coupon"; > ;
        < "The first coupon date"; > ;
        < "Rate"; > ;
        < "The rate"; > ;
        < "Price"; > ;
        < "The price"; > ;
        < "Redemption"; > ;
        < "The redemption value"; > ;
        < "Frequency"; > ;
        < "The frequency"; > ;
        < "Basis"; > ;
        < "The basis"; > ;
    };
};

StringArray ANALYSIS_Oddlprice
{
    ItemList [ en-US ] =
    {
        < "Returns the price per $100 face value of a security with an odd last period"; > ;
        < "Settlement"; > ;
        < "The settlement"; > ;
        < "Maturity"; > ;
        < "The maturity"; > ;
        < "Last interest"; > ;
        < "The last interest date"; > ;
        < "Rate"; > ;
        < "The rate"; > ;
        < "Yield"; > ;
        < "The yield"; > ;
        < "Redemption"; > ;
        < "The redemption value"; > ;
        < "Frequency"; > ;
        < "The frequency"; > ;
        < "Basis"; > ;
        < "The basis"; > ;
    };
};

StringArray ANALYSIS_Oddlyield
{
    ItemList [ en-US ] =
    {
        < "Returns the yield of a security with an odd last period"; > ;
        < "Settlement"; > ;
        < "The settlement"; > ;
        < "Maturity"; > ;
        < "The maturity"; > ;
        < "Last interest"; > ;
        < "The last interest date"; > ;
        < "Rate"; > ;
        < "The rate"; > ;
        < "Price"; > ;
        < "The price"; > ;
        < "Redemption"; > ;
        < "The redemption value"; > ;
        < "Frequency"; > ;
        < "The frequency"; > ;
        < "Basis"; > ;
        < "The basis"; > ;
    };
};

StringArray ANALYSIS_Xirr
{
    ItemList [ en-US ] =
    {
        < "Returns the internal rate of return for a non-periodic schedule of payments"; > ;
        < "Values"; > ;
        < "The values"; > ;
        < "Dates"; > ;
        < "The dates"; > ;
        < "Guess"; > ;
        < "The guess"; > ;
    };
};

StringArray ANALYSIS_Xnpv
{
    ItemList [ en-US ] =
    {
        < "Returns the net present value for a non-periodic schedule of payments"; > ;
        < "Rate"; > ;
        < "The rate"; > ;
        < "Values"; > ;
        < "The values"; > ;
        < "Dates"; > ;
        < "The dates"; > ;
    };
};

StringArray ANALYSIS_Intrate
{
    ItemList [ en-US ] =
    {
        < "Returns the interest rate for a fully invested security"; > ;
        < "Settlement"; > ;
        < "The settlement"; > ;
        < "Maturity"; > ;
        < "The maturity"; > ;
        < "Investment"; > ;
        < "The investment"; > ;
        < "Redemption"; > ;
        < "The redemption value"; > ;
        < "Basis"; > ;
        < "The basis"; > ;
    };
};

StringArray ANALYSIS_Coupncd
{
    ItemList [ en-US ] =
    {
        < "Returns the first coupon date after the settlement date"; > ;
        < "Settlement"; > ;
        < "The settlement"; > ;
        < "Maturity"; > ;
        < "The maturity"; > ;
        < "Frequency"; > ;
        < "The frequency"; > ;
        < "Basis"; > ;
        < "The basis"; > ;
    };
};

StringArray ANALYSIS_Coupdays
{
    ItemList [ en-US ] =
    {
        < "Returns the number of days in the coupon period containing the settlement date"; > ;
        < "Settlement"; > ;
        < "The settlement"; > ;
        < "Maturity"; > ;
        < "The maturity"; > ;
        < "Frequency"; > ;
        < "The frequency"; > ;
        < "Basis"; > ;
        < "The basis"; > ;
    };
};

StringArray ANALYSIS_Coupdaysnc
{
    ItemList [ en-US ] =
    {
        < "Returns the number of days from the settlement date to the next coupon date"; > ;
        < "Settlement"; > ;
        < "The settlement"; > ;
        < "Maturity"; > ;
        < "The maturity"; > ;
        < "Frequency"; > ;
        < "The frequency"; > ;
        < "Basis"; > ;
        < "The basis"; > ;
    };
};

StringArray ANALYSIS_Coupdaybs
{
    ItemList [ en-US ] =
    {
        < "Returns the number of days from the beginning of the coupon period to the settlement date"; > ;
        < "Settlement"; > ;
        < "The settlement"; > ;
        < "Maturity"; > ;
        < "The maturity"; > ;
        < "Frequency"; > ;
        < "The frequency"; > ;
        < "Basis"; > ;
        < "The basis"; > ;
    };
};

StringArray ANALYSIS_Couppcd
{
    ItemList [ en-US ] =
    {
        < "Returns the last coupon date preceding the settlement date"; > ;
        < "Settlement"; > ;
        < "The settlement"; > ;
        < "Maturity"; > ;
        < "The maturity"; > ;
        < "Frequency"; > ;
        < "The frequency"; > ;
        < "Basis"; > ;
        < "The basis"; > ;
    };
};

StringArray ANALYSIS_Coupnum
{
    ItemList [ en-US ] =
    {
        < "Returns the number of coupons payable between the settlement and maturity dates"; > ;
        < "Settlement"; > ;
        < "The settlement"; > ;
        < "Maturity"; > ;
        < "The maturity"; > ;
        < "Frequency"; > ;
        < "The frequency"; > ;
        < "Basis"; > ;
        < "The basis"; > ;
    };
};

StringArray ANALYSIS_Fvschedule
{
    ItemList [ en-US ] =
    {
        < "Returns the future value of the initial principal after a series of compound interest rates are applied"; > ;
        < "Principal"; > ;
        < "The principal"; > ;
        < "Schedule"; > ;
        < "The schedule"; > ;
    };
};

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
